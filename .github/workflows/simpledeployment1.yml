name: Simple Deployment 1

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        type: environment
        required: true    
      mode:
        description: 'Optional mode (slow or fail)'
        required: false
        default: ''

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.environment.name }}
    steps:
      - name: Create 'in_progress' deployment status
        id: create_deployment
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const ref = context.sha; // The commit SHA being deployed
            const environment = process.env.GITHUB_ENVIRONMENT; // The environment name (e.g., 'my-staging-environment')
            const workflowRunUrl = `${context.serverUrl}/${owner}/${repo}/actions/runs/${context.runId}`;

            // 1. Create a new deployment object
            const deployment = await github.rest.repos.createDeployment({
              owner,
              repo,
              ref,
              environment: environment,
              auto_merge: false, // Prevents automatic merging of status
              required_contexts: [], // Do not require other status checks
              description: 'Deployment initiated by GitHub Actions workflow',
            });

            // Store the deployment ID to use in subsequent steps
            core.setOutput('deployment_id', deployment.data.id);
            console.log(`Created Deployment ID: ${deployment.data.id}`);

            // 2. Set the deployment status to 'in_progress'
            await github.rest.repos.createDeploymentStatus({
              owner,
              repo,
              deployment_id: deployment.data.id,
              state: 'in_progress',
              description: 'Deployment workflow started.',
              log_url: workflowRunUrl, // Link back to this workflow run
              environment_url: process.env.GITHUB_ENVIRONMENT_URL, // Optional: URL for the environment
            });
            console.log('Set deployment status to in_progress.');
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Pass the environment variables provided by GitHub Actions for clarity
          GITHUB_ENVIRONMENT: ${{ github.environment }}
          GITHUB_ENVIRONMENT_URL: ${{ github.environment_url }}

      - name: Sleep if slow
        if: ${{ github.event.inputs.mode == 'slow' }}
        run: sleep 30

      - name: Fail if requested
        if: ${{ github.event.inputs.mode == 'fail' }}
        run: |
          echo "Failing as requested"
          exit 1

      - name: Deploy
        id: deploy
        if: ${{ github.event.inputs.mode != 'fail' }}
        run: |
            echo "Deployment completed successfully"
            exit 0

      - name: Set final 'success' or 'failure' deployment status
        uses: actions/github-script@v7
        # 'if: always()' ensures this step runs even if 'simulate_deployment' failed
        if: always()
        with:
          script: |
            const { owner, repo } = context.repo;
            // Retrieve the deployment ID from the output of the 'create_deployment' step
            const deploymentId = process.env.DEPLOYMENT_ID; 
            const workflowRunUrl = `${context.serverUrl}/${owner}/${repo}/actions/runs/${context.runId}`;
            const environmentUrl = process.env.GITHUB_ENVIRONMENT_URL;

            // Determine the state based on the outcome of the 'simulate_deployment' step
            const deploymentSucceeded = steps.deploy.outcome === 'success';

            let state;
            let description;
            if (deploymentSucceeded) {
              state = 'success';
              description = 'Deployment completed successfully.';
            } else {
              state = 'failure';
              description = 'Deployment failed during simulation.';
            }

            console.log(`Setting final deployment status to: ${state}`);
            await github.rest.repos.createDeploymentStatus({
              owner,
              repo,
              deployment_id: deploymentId,
              state: state,
              description: description,
              log_url: workflowRunUrl,
              environment_url: environmentUrl,
            });
            console.log('Deployment status updated.');
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Pass the deployment ID output from the previous step as an environment variable
          DEPLOYMENT_ID: ${{ steps.create_deployment.outputs.deployment_id }}
          GITHUB_ENVIRONMENT_URL: ${{ github.environment_url }}

      - name: Fail job if deployment simulation failed
        # This step explicitly fails the entire job if the simulation failed,
        # ensuring the workflow run also shows a failed status.
        if: steps.deploy.outcome == 'failure'
        run: |
          echo "The deployment job failed"
          exit 1
